"""Parser for images generated by AUTOMATIC1111's stable-diffusion-webui or similar."""

import json
from typing import Any, Dict

from sd_parsers.data import Generators, Model, Prompt, Sampler, PromptInfo
from sd_parsers.exceptions import ParserError
from sd_parsers.parser import Parser, ReplacementRules, pop_keys

SAMPLER_PARAMS = ["guidance_scale", "scheduler", "seed", "sharpness", "steps"]

REPLACEMENT_RULES: ReplacementRules = [("guidance_scale", "cfg_scale")]


class FooocusParser(Parser):
    """Parse images generated by Foocus."""

    generator = Generators.FOOOCUS

    def parse(self, _parameters: Dict[str, Any]) -> PromptInfo:
        try:
            parameters = json.loads(_parameters["parameters"])
        except (KeyError, TypeError, json.JSONDecodeError) as error:
            raise ParserError("error decoding parameter data") from error

        try:
            model = Model(
                name=parameters.pop("base_model"),
                hash=parameters.pop("base_model_hash"),
            )

            sampler_parameters = self.normalize_parameters(
                pop_keys(SAMPLER_PARAMS, parameters),
                REPLACEMENT_RULES,
            )

            sampler = {
                "name": parameters.pop("sampler"),
                "parameters": sampler_parameters,
                "model": model,
                "prompts": [Prompt(parameters.pop("prompt"))],
            }

            negative_prompt = parameters.pop("negative_prompt")
            if negative_prompt:
                sampler["negative_prompts"] = [Prompt(negative_prompt)]

        except KeyError as error:
            raise ParserError("error reading parameter value") from error

        return PromptInfo(self.generator, [Sampler(**sampler)], parameters, _parameters)
