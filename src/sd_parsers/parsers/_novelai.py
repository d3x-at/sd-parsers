"""Parser for images generated by NovelAI or similar."""
import json
import re
from contextlib import suppress
from typing import Any, Dict

from PIL.Image import Image
from PIL.PngImagePlugin import PngImageFile

from .._models import Model, Prompt, Sampler
from .._parser import Generators, Parser, ParseResult, pop_keys
from .._prompt_info import PromptInfo
from ..exceptions import ParserError
from ._managed_parsers import MANAGED_PARSERS

SAMPLER_PARAMS = ["seed", "strength", "noise", "scale"]


class NovelAIParser(Parser):
    """parser for images generated by NovelAI"""

    @property
    def generator(self):
        return Generators.NOVELAI

    def read_parameters(self, image: Image):
        if not isinstance(image, PngImageFile):
            return None, None

        try:
            description = image.text["Description"]
            software = image.text["Software"]
            source = image.text["Source"]
            comment = json.loads(image.text["Comment"])
        except (KeyError, json.JSONDecodeError, TypeError) as error:
            return None, error

        if software != "NovelAI":
            return None, None

        return PromptInfo(
            self,
            {
                "Comment": comment,
                "Description": description,
                "Software": software,
                "Source": source,
            },
        ), None

    def parse(self, parameters: Dict[str, Any]) -> ParseResult:
        try:
            metadata = parameters["Comment"]
            params = parameters["Description"]
            source = parameters["Source"]
        except KeyError as error:
            raise ParserError("error reading parameter values") from error

        try:
            sampler = Sampler(
                name=metadata.pop("sampler"),
                parameters=self.normalize_parameters(pop_keys(SAMPLER_PARAMS, metadata)),
            )
        except KeyError as error:
            raise ParserError("no sampler found") from error

        sampler.prompts.append(Prompt(params.strip()))

        with suppress(KeyError):
            negative_prompt = Prompt(metadata.pop("uc"))
            sampler.negative_prompts.append(negative_prompt)

        # model
        match = re.fullmatch(r"^(.*?)\s+([A-Z0-9]+)$", source)
        if match:
            model_name, model_hash = match.groups()
            sampler.model = Model(name=model_name, model_hash=model_hash)

        metadata = self.normalize_parameters(metadata)

        return [sampler], metadata


MANAGED_PARSERS.append(NovelAIParser)
