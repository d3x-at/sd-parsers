"""Parser for images generated by InvokeAI."""
from __future__ import annotations

from typing import Any, Callable, Dict, NamedTuple

from PIL.Image import Image

from sd_parsers.data import Generators, PromptInfo
from sd_parsers.parser import Parser, ParseResult

from ._variant_dream import _parse_dream
from ._variant_invokeai_meta import _parse_invokeai_meta
from ._variant_sd_metadata import _parse_sd_metadata


class VariantParser(NamedTuple):
    """Holds a parsing function for a metadata format and
    information on how to prepare the data passed to it."""

    parse: Callable[[Parser, Any], ParseResult]
    read_parameters: Callable[[dict], dict]


VARIANT_PARSERS = [
    VariantParser(
        _parse_sd_metadata,
        lambda m: {"sd-metadata": m["sd-metadata"]},
    ),
    VariantParser(
        _parse_invokeai_meta,
        lambda m: {
            key: m[key] for key in {"invokeai_metadata", "invokeai_graph"}.intersection(m.keys())
        },
    ),
    VariantParser(
        _parse_dream,
        lambda m: {"Dream": m["Dream"]},
    ),
]


class InvokeAIParser(Parser):
    """parser for images generated by invokeai"""

    @property
    def generator(self):
        return Generators.INVOKEAI

    def read_parameters(self, image: Image, use_text: bool = True):
        if image.format != "PNG":
            return None

        metadata = image.text if use_text else image.info  # type: ignore
        for variant in VARIANT_PARSERS:
            try:
                parameters = variant.read_parameters(metadata)
            except KeyError:
                continue

            if parameters:
                return PromptInfo(self, parameters, variant)

        return None

    def parse(self, parameters: Dict[str, Any], variant: VariantParser) -> ParseResult:
        return variant.parse(self, parameters)
